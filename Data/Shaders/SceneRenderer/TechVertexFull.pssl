ConstantBuffer uProjViewMtx
{
	column_major matrix projViewMatrix;
};

ConstantBuffer uModelMtx
{
	column_major matrix modelMatrix;
};

struct VS_INPUT
{
	float3 Position		: POSITION0;
	float2 UV			: TEXCOORD0;
	float3 Normal		: TEXCOORD1;
	float3 Tangent		: TEXCOORD2;
};


struct VS_OUTPUT
{
	float4 WorldPosition  : S_POSITION;
	float2 UV			: TEXCOORD0;
};
/*
// To implement
float3x3 inverse(float3x3 m)
{
	float det = determinant(m);
	float invDet = 1.0 / det;
	float3x3 minv;
	
	minv[0][0] = (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * invDet;
	minv[0][1] = (m[0][2] * m[2][1] - m[0][1] * m[2][2]) * invDet;
	minv[0][2] = (m[0][1] * m[1][2] - m[0][2] * m[1][1]) * invDet;
	minv[1][0] = (m[1][2] * m[2][0] - m[1][0] * m[2][2]) * invDet;
	minv[1][1] = (m[0][0] * m[2][2] - m[0][2] * m[2][0]) * invDet;
	minv[1][2] = (m[1][0] * m[0][2] - m[0][0] * m[1][2]) * invDet;
	minv[2][0] = (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * invDet;
	minv[2][1] = (m[2][0] * m[0][1] - m[0][0] * m[2][1]) * invDet;
	minv[2][2] = (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * invDet;

	return minv;
}
*/


VS_OUTPUT main(VS_INPUT input)
{
	VS_OUTPUT output;


//	output.WorldPosition = float4(input.Position.xyz, 1);

    // output.WorldPosition.xyz = input.Position;

	 //output.WorldPosition.z = 0.001f;
	//output.WorldPosition.w  = 0.1f;

	//if(output.WorldPosition.y < 0.0f) {
	//	output.WorldPosition.y *= 100.1;
	//}
	//
	//if(output.WorldPosition.y > 0.0f) {
	//	output.WorldPosition.y *= 100000.1;
	//}


	//output.WorldPosition = float4(output.WorldPosition.x * 100.0, output.WorldPosition.y, 0.0, 1.0035);


	output.WorldPosition = mul(mul(projViewMatrix, modelMatrix), float4(input.Position.xyz, 1.0f));

	//float4 pos = float4(input.Position.xyz, 1.0f);

	//pos = mul(modelMatrix, pos);
//	pos = mul(projViewMatrix, pos);

	//pos = mul(mul(projViewMatrix, modelMatrix), pos);

	//output.WorldPosition = pos;

	//output.WorldPosition = mul(projViewMatrix, float4(input.Position.xyz, 1.0f));
	//output.WorldPosition.z = 0.0f;

	//output.WorldPosition.xyz /= output.WorldPosition.w;
	//
	//output.WorldPosition.w = 1.0f;

	//output.WorldPosition.x = clamp(output.WorldPosition.x, -0.999f, 0.999f);
	//output.WorldPosition.y = clamp(output.WorldPosition.y, -0.999f, 0.999f);
	//output.WorldPosition.z = clamp(output.WorldPosition.z, -0.999f, 0.999f);

	//output.WorldPosition.x = clamp(output.WorldPosition.x, -0.99f, 0.99f);
	//
	//output.WorldPosition.y = clamp(output.WorldPosition.y, -0.99f, 0.99f);
	//
	//
	//output.WorldPosition.z = clamp(output.WorldPosition.z, -0.99f, 0.99f);
	//
	//output.WorldPosition.z = 0.0f;
	//
	//output.WorldPosition.w = clamp(output.WorldPosition.w, -0.99f, 0.99f);
	//
	//
	//output.WorldPosition.w = 1.1f;

	output.UV = input.UV;
//	output.Normal = mul(transpose(inverse(float3x3(modelMatrix))),  normalize(input.Normal));
	//output.Normal = input.Normal;
	
	return output;
}